Personal Finance Tracking and Visualization System
I'll create a comprehensive plan for you to develop a Python-based personal finance tracking system that can help you categorize transactions, visualize spending patterns, and aid in budgeting.
Step 1: Data Collection and Standardization
First, you'll need to gather and standardize your financial data from multiple sources:
pythonCopyimport pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os

Download Statements: Most banks allow you to download statements as CSV or Excel files.
Create a Data Pipeline:

pythonCopydef import_statement(filepath, source):
    """
    Import a statement from any source and standardize the format
    
    Parameters:
        filepath (str): Path to the statement file
        source (str): One of 'wells_fargo', 'chase', 'bank_of_america', 'apple_pay', 'schwab'
    
    Returns:
        pandas.DataFrame: Standardized dataframe with transactions
    """
    if source == 'wells_fargo':
        df = pd.read_csv(filepath)
        # Wells Fargo specific column mapping
        df = df.rename(columns={
            'Date': 'date',
            'Description': 'description',
            'Amount': 'amount'
        })
    elif source == 'chase':
        # Chase specific format
        df = pd.read_csv(filepath)
        df = df.rename(columns={
            'Transaction Date': 'date',
            'Post Date': 'post_date',
            'Description': 'description',
            'Amount': 'amount',
            'Category': 'original_category'
        })
    # Add similar blocks for other sources
    
    # Standardize date format
    df['date'] = pd.to_datetime(df['date'])
    
    # Ensure amount is consistently signed (expenses negative, income positive)
    if source in ['chase', 'wells_fargo']:
        # These sources may have reversed signs
        df['amount'] = -df['amount']
    
    # Add source column
    df['source'] = source
    
    # Add standard columns if they don't exist
    if 'category' not in df.columns:
        df['category'] = None
    
    return df[['date', 'description', 'amount', 'source', 'category', 'original_category']]
Step 2: Transaction Categorization
Next, you'll need to categorize your transactions:
pythonCopydef categorize_transactions(df):
    """
    Categorize transactions based on description keywords.
    """
    # Define categories and their keywords
    categories = {
        'Groceries': ['trader', 'safeway', 'grocery', 'market', 'food', 'whole foods'],
        'Dining': ['restaurant', 'mcdonalds', 'starbucks', 'coffee', 'doordash', 'grubhub', 'uber eats'],
        'Transportation': ['uber', 'lyft', 'gas', 'shell', 'chevron', 'transit', 'parking'],
        'Shopping': ['amazon', 'target', 'walmart', 'bestbuy', 'ebay', 'etsy'],
        'Entertainment': ['netflix', 'hbo', 'spotify', 'movie', 'hulu', 'disney'],
        'Housing': ['rent', 'mortgage', 'hoa', 'maintenance'],
        'Utilities': ['electric', 'water', 'gas', 'internet', 'phone', 'utility'],
        'Health': ['doctor', 'pharmacy', 'medical', 'fitness', 'gym'],
        'Insurance': ['insurance', 'geico', 'allstate', 'state farm'],
        'Education': ['tuition', 'course', 'book', 'school'],
        'Income': ['payroll', 'salary', 'deposit', 'dividend'],
        'Investments': ['investment', 'transfer to', 'schwab'],
        'Subscriptions': ['subscription', 'membership', 'monthly'],
        'Travel': ['hotel', 'flight', 'airbnb', 'airline', 'expedia', 'booking.com'],
    }
    
    # Function to determine category based on description
    def get_category(description):
        description = str(description).lower()
        for category, keywords in categories.items():
            if any(keyword in description for keyword in keywords):
                return category
        return 'Miscellaneous'
    
    # Apply categorization
    if 'original_category' in df.columns and df['original_category'].notna().any():
        # Use original categories if available (from Chase, etc.)
        # Map the bank's categories to your standardized ones
        df['category'] = df['original_category'].apply(lambda x: map_original_category(x))
    else:
        # Use keyword matching
        df['category'] = df['description'].apply(get_category)
    
    return df

def map_original_category(original):
    """Map bank-provided categories to your standardized categories"""
    mapping = {
        'Food & Drink': 'Dining',
        'Groceries': 'Groceries',
        # Add more mappings
    }
    return mapping.get(original, 'Miscellaneous')
Step 3: Data Storage
Create a consistent storage system:
pythonCopydef save_to_database(df, db_path='finance_data.db'):
    """Save transactions to SQLite database"""
    import sqlite3
    
    conn = sqlite3.connect(db_path)
    df.to_sql('transactions', conn, if_exists='append', index=False)
    conn.close()

def load_from_database(db_path='finance_data.db', start_date=None, end_date=None):
    """Load transactions from SQLite database with optional date filtering"""
    import sqlite3
    
    conn = sqlite3.connect(db_path)
    
    query = "SELECT * FROM transactions"
    params = []
    
    if start_date:
        query += " WHERE date >= ?"
        params.append(start_date)
        
        if end_date:
            query += " AND date <= ?"
            params.append(end_date)
    elif end_date:
        query += " WHERE date <= ?"
        params.append(end_date)
    
    df = pd.read_sql_query(query, conn, params=params, parse_dates=['date'])
    conn.close()
    
    return df
Step 4: Analysis and Visualization
Create functions to analyze and visualize your spending:
pythonCopydef monthly_spending_by_category(df):
    """
    Group spending by month and category
    """
    # Extract month and year from date
    df['month_year'] = df['date'].dt.to_period('M')
    
    # Group by month and category, sum the amounts
    monthly_cat = df[df['amount'] < 0].groupby(['month_year', 'category'])['amount'].sum().abs().reset_index()
    
    # Pivot to get categories as columns
    pivot_table = monthly_cat.pivot_table(
        index='month_year', 
        columns='category', 
        values='amount', 
        fill_value=0
    )
    
    return pivot_table

def plot_monthly_spending(monthly_spending):
    """
    Plot monthly spending trends
    """
    # Convert period index to datetime for plotting
    monthly_spending.index = monthly_spending.index.to_timestamp()
    
    # Plot
    plt.figure(figsize=(12, 6))
    monthly_spending.plot(kind='bar', stacked=True, figsize=(12, 6))
    plt.title('Monthly Spending by Category')
    plt.xlabel('Month')
    plt.ylabel('Amount ($)')
    plt.legend(title='Category', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    
    return plt

def plot_category_distribution(df, month=None):
    """
    Plot distribution of spending across categories for a specific month or all time
    """
    if month:
        # Filter for specific month
        mask = df['date'].dt.to_period('M') == month
        title_suffix = f' for {month}'
    else:
        # Use all data
        mask = df['amount'] < 0  # Only expenses
        title_suffix = ' (All Time)'
    
    # Group by category and sum
    category_totals = df[mask].groupby('category')['amount'].sum().abs().sort_values(ascending=False)
    
    # Plot
    plt.figure(figsize=(10, 6))
    category_totals.plot(kind='pie', autopct='%1.1f%%', figsize=(10, 6))
    plt.title(f'Spending Distribution by Category{title_suffix}')
    plt.ylabel('')
    plt.tight_layout()
    
    return plt

def income_vs_expenses(df):
    """
    Plot income vs expenses by month
    """
    # Extract month and year
    df['month_year'] = df['date'].dt.to_period('M')
    
    # Group by month, separate income and expenses
    monthly = df.groupby(['month_year']).apply(
        lambda x: pd.Series({
            'Income': x[x['amount'] > 0]['amount'].sum(),
            'Expenses': x[x['amount'] < 0]['amount'].sum().abs(),
            'Net': x['amount'].sum()
        })
    ).reset_index()
    
    # Convert period to datetime for plotting
    monthly['month_year'] = monthly['month_year'].dt.to_timestamp()
    
    # Plot
    plt.figure(figsize=(12, 6))
    plt.bar(monthly['month_year'], monthly['Income'], color='green', label='Income')
    plt.bar(monthly['month_year'], monthly['Expenses'], color='red', label='Expenses')
    plt.plot(monthly['month_year'], monthly['Net'], color='blue', marker='o', label='Net')
    
    plt.title('Monthly Income vs Expenses')
    plt.xlabel('Month')
    plt.ylabel('Amount ($)')
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    
    return plt
Step 5: Budget Planning and Tracking
Create a budget system and compare actual spending:
pythonCopydef create_budget(categories, amounts):
    """
    Create a monthly budget
    
    Parameters:
        categories (list): List of spending categories
        amounts (list): List of budget amounts corresponding to categories
    
    Returns:
        pandas.DataFrame: Budget dataframe
    """
    budget_df = pd.DataFrame({
        'category': categories,
        'budget_amount': amounts
    })
    
    return budget_df

def save_budget(budget_df, filepath='budget.csv'):
    """Save budget to CSV file"""
    budget_df.to_csv(filepath, index=False)

def load_budget(filepath='budget.csv'):
    """Load budget from CSV file"""
    return pd.read_csv(filepath)

def compare_budget_vs_actual(transactions_df, budget_df, month=None):
    """
    Compare actual spending with budget
    
    Parameters:
        transactions_df (pandas.DataFrame): Transaction data
        budget_df (pandas.DataFrame): Budget data
        month (str, optional): Month to analyze in 'YYYY-MM' format
    
    Returns:
        pandas.DataFrame: Comparison of budget vs. actual spending
    """
    # Filter transactions for the specified month
    if month:
        month_period = pd.Period(month)
        mask = transactions_df['date'].dt.to_period('M') == month_period
    else:
        # Use current month if not specified
        current_month = pd.Period(datetime.now(), freq='M')
        mask = transactions_df['date'].dt.to_period('M') == current_month
    
    # Get actual spending by category
    actual_spending = transactions_df[mask & (transactions_df['amount'] < 0)].groupby('category')['amount'].sum().abs()
    
    # Create comparison dataframe
    comparison = budget_df.set_index('category').copy()
    comparison['actual_amount'] = actual_spending
    comparison.fillna(0, inplace=True)
    
    # Calculate difference and percentage
    comparison['difference'] = comparison['budget_amount'] - comparison['actual_amount']
    comparison['percentage_used'] = (comparison['actual_amount'] / comparison['budget_amount'] * 100).round(2)
    
    return comparison.reset_index()

def plot_budget_comparison(comparison_df):
    """
    Plot budget vs actual spending
    
    Parameters:
        comparison_df (pandas.DataFrame): Output from compare_budget_vs_actual
    
    Returns:
        matplotlib.pyplot: Plot object
    """
    plt.figure(figsize=(12, 6))
    
    # Sort by budget amount for better visualization
    comparison_df = comparison_df.sort_values('budget_amount', ascending=False)
    
    # Set up bar positions
    categories = comparison_df['category']
    x = np.arange(len(categories))
    width = 0.35
    
    # Create bars
    plt.bar(x - width/2, comparison_df['budget_amount'], width, label='Budget', color='blue', alpha=0.7)
    plt.bar(x + width/2, comparison_df['actual_amount'], width, label='Actual', color='red', alpha=0.7)
    
    # Add labels and title
    plt.xlabel('Category')
    plt.ylabel('Amount ($)')
    plt.title('Budget vs. Actual Spending')
    plt.xticks(x, categories, rotation=45, ha='right')
    plt.legend()
    
    # Add budget percentage labels
    for i, row in enumerate(comparison_df.itertuples()):
        percentage = row.percentage_used
        color = 'green' if percentage <= 100 else 'red'
        plt.text(i + width/2, row.actual_amount + 50, f"{percentage:.1f}%", 
                 ha='center', va='bottom', color=color, fontweight='bold')
    
    plt.tight_layout()
    return plt